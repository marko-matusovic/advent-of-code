from math import floor, ceil


def parse():
    raw = [
        [[[5, 3], [[8, 6], [7, 1]]], [8, 0]],
        [2, [[3, 6], [[3, 6], 1]]],
        [9, [[[7, 1], 3], 3]],
        [[[3, [3, 9]], [3, 9]], [[[7, 4], 4], 3]],
        [[[[1, 8], [9, 6]], [[1, 1], 2]], [[[3, 1], 4], 6]],
        [[[[4, 0], [2, 5]], [9, 4]], [[[6, 9], [0, 1]], 1]],
        [[1, [[3, 7], [5, 3]]], [[[9, 9], [9, 6]], [0, 9]]],
        [[[2, [9, 9]], [3, 3]], [[[5, 1], 1], [9, 0]]],
        [3, [3, 9]],
        [[[[1, 6], [4, 3]], 3], [[9, [4, 0]], [[2, 0], 4]]],
        [[2, [6, 7]], [6, 2]],
        [[[9, [3, 3]], [5, [8, 7]]], [9, [[7, 7], [0, 6]]]],
        [[[4, [7, 5]], [9, [9, 0]]], 0],
        [7, [[3, 8], 8]],
        [[[7, 0], [9, 9]], 8],
        [4, [[[9, 4], [8, 1]], [2, [3, 5]]]],
        [[[2, 6], [5, [5, 5]]], [[[7, 0], [2, 2]], [9, 8]]],
        [[0, [0, [1, 1]]], 9],
        [[[2, [7, 9]], 1], [8, [[8, 8], [6, 8]]]],
        [[8, [[5, 3], [4, 4]]], [0, [2, [3, 7]]]],
        [[[2, [1, 3]], 5], [[9, [9, 8]], [[8, 4], [9, 7]]]],
        [[[9, 9], [[0, 1], [6, 2]]], 4],
        [[[0, 3], [[8, 0], 4]], [[7, 5], 2]],
        [[[0, [1, 7]], 4], [[7, 4], [[0, 6], [2, 8]]]],
        [[[2, [8, 3]], 1], [[[5, 6], 9], [[6, 8], [3, 9]]]],
        [[[0, [5, 9]], [7, 7]], [4, [[2, 3], [6, 8]]]],
        [[2, [9, 7]], [5, 0]],
        [[1, [[8, 1], [1, 7]]], [3, 5]],
        [[[[2, 7], 0], [[8, 6], [0, 4]]], [[1, [5, 5]], [[0, 1], [2, 8]]]],
        [[0, 4], [[1, 1], [9, [6, 2]]]],
        [[[6, [6, 0]], 7], [3, [4, [3, 7]]]],
        [[[3, [9, 6]], 0], 9],
        [6, [[7, [1, 6]], [7, 8]]],
        [[4, [8, [6, 6]]], [[[0, 1], 1], [6, [9, 0]]]],
        [[[8, 4], [2, [6, 0]]], [[9, 5], [[7, 9], 0]]],
        [[[7, 7], [[7, 3], 9]], [[3, 7], 6]],
        [[7, [9, 0]], 5],
        [[1, 5], [2, [[6, 4], [5, 0]]]],
        [0, [[0, 6], [[5, 1], 7]]],
        [[3, 0], 9],
        [1, [8, [[9, 8], [6, 5]]]],
        [[[7, 8], [0, [8, 2]]], [1, [1, [2, 4]]]],
        [[[2, [5, 6]], 3], [[4, [9, 5]], [9, 8]]],
        [[[[0, 0], [8, 7]], [[9, 1], 2]], [[9, [6, 9]], 4]],
        [8, [[9, 6], [[2, 4], 5]]],
        [[[2, [0, 4]], [2, [3, 7]]], [[[8, 1], [9, 4]], 4]],
        [8, 2],
        [[[3, 7], 0], 7],
        [[0, 1], [[2, 4], [1, 5]]],
        [[6, [2, 2]], [[[3, 3], 1], [[4, 0], 6]]],
        [2, [[5, 8], 6]],
        [7, [5, [5, 5]]],
        [[1, [[2, 4], 0]], [[2, [8, 3]], [4, [3, 7]]]],
        [[[5, 1], [[7, 6], 3]], [[[4, 8], [5, 9]], 8]],
        [[[8, [3, 5]], [[1, 8], [0, 3]]], [[0, [1, 8]], [6, 8]]],
        [[[[0, 8], 8], [[0, 5], [7, 6]]], [2, 1]],
        [5, [4, [7, 0]]],
        [[7, [[6, 5], [5, 2]]], [4, 6]],
        [[2, 6], [[2, 1], [[2, 3], [2, 3]]]],
        [[[0, [4, 9]], [3, [8, 9]]], [[[9, 0], [6, 2]], [2, 1]]],
        [6, [6, [0, [3, 1]]]],
        [[[9, 8], [[4, 9], 8]], [[[3, 2], [9, 1]], 5]],
        [[[[2, 6], [0, 9]], [2, 7]], [1, [9, 2]]],
        [[[5, [7, 9]], [[2, 3], 2]], [[[9, 5], 0], [[9, 6], [3, 3]]]],
        [[[[6, 3], [2, 1]], [[7, 6], [6, 8]]], [[[0, 2], [8, 0]], [0, [9, 5]]]],
        [[[[2, 0], 0], 1], [4, [[3, 6], [3, 1]]]],
        [[[3, 1], [5, 0]], [[[3, 3], [0, 2]], [5, 8]]],
        [[[[1, 0], 8], [[2, 3], [2, 1]]], [[4, [5, 5]], [[9, 8], 3]]],
        [[[8, [0, 5]], [9, 9]], [[[7, 0], 1], [[7, 2], 7]]],
        [[[[3, 0], 4], 7], [[3, 9], [4, [9, 7]]]],
        [[[8, 3], 0], [6, 5]],
        [[2, [[3, 8], 6]], [[[3, 2], [1, 4]], [[1, 6], [9, 4]]]],
        [[[[6, 2], [4, 7]], [3, 9]], [[1, [6, 5]], 4]],
        [[[[8, 3], 2], [8, 2]], 5],
        [[[9, [9, 0]], [4, 7]], [[[5, 9], 2], 6]],
        [4, [[6, 0], 3]],
        [[[5, 9], [8, 3]], 0],
        [[[[6, 1], [4, 8]], [9, [1, 6]]], 1],
        [[[8, 5], [2, 2]], 6],
        [2, [5, [[5, 7], [6, 0]]]],
        [[[[3, 6], [2, 3]], 6], [[6, [6, 5]], [[6, 4], [6, 9]]]],
        [[4, [[1, 3], 1]], 1],
        [[2, [7, [4, 3]]], 0],
        [[8, [[1, 1], 1]], [[4, 1], [[9, 6], [1, 3]]]],
        [[8, 1], [3, [2, [5, 7]]]],
        [8, [[[2, 4], [8, 3]], [[8, 7], [2, 8]]]],
        [[0, [[5, 7], 8]], [[3, [6, 6]], [0, 8]]],
        [7, [[1, 3], [2, 4]]],
        [[[2, 0], [0, 1]], [[[8, 9], [7, 0]], [3, 6]]],
        [[[1, 6], [[6, 9], [6, 3]]], [2, [1, 1]]],
        [[1, [7, [8, 1]]], [[[0, 3], [9, 1]], [[1, 5], 2]]],
        [[[[1, 3], 2], 1], [[[0, 4], 5], [[5, 0], [1, 1]]]],
        [[[2, [0, 1]], [5, 6]], 4],
        [[8, 3], [[6, 4], [[0, 9], 5]]],
        [[[[2, 7], 4], [7, 0]], [[[6, 7], 2], [3, 8]]],
        [[[[9, 3], 9], [[2, 9], [9, 0]]], [[[7, 5], 3], [[8, 8], 8]]],
        [[[[0, 1], [8, 4]], [4, [8, 5]]], [2, [1, [0, 2]]]],
        [[5, [[3, 5], [9, 2]]], [[[2, 2], 3], [[4, 7], 3]]],
        [[[7, 8], 8], 2],
        [9, [2, 1]]
    ]

    # hehe

    return raw


def add_to_side(snail, add, i):
    if add is None:
        return
    if type(snail[i]) is int:
        snail[i] += add
        return
    add_to_side(snail[i], add, i)


def explode(level, snail):
    # if exec and left in None and right is None:
    #     return (True, level-1, snail, None, None)
    if type(snail) is int:
        return (False, snail, None, None)
    [left, right] = snail
    if level >= 4:
        return (True, 0, left, right)
    (exec, new_left, add_left, add_right) = explode(level + 1, left)
    if exec:
        if type(right) is int and add_right is not None:
            right += add_right
        else:
            add_to_side(right, add_right, 0)
        new_right = right
        return (True, [new_left, new_right], add_left, None)
    (exec, new_right, add_left, add_right) = explode(level + 1, right)
    if exec:
        if type(left) is int and add_left is not None:
            left += add_left
        else:
            add_to_side(left, add_left, 1)
        new_left = left
        return (True, [new_left, new_right], None, add_right)
    return (False, snail, None, None)


def split(snail):
    if type(snail) is int:
        if snail > 9:
            return (True, [floor(snail / 2), ceil(snail / 2)])
        return (False, snail)
    [left, right] = snail
    (exec, mod_left) = split(left)
    if exec:
        return (True, [mod_left, right])
    (exec, mod_right) = split(right)
    return (exec, [mod_left, mod_right])


def magnitude(snail):
    if type(snail) is int:
        return snail
    [left, right] = snail
    return 3 * magnitude(left) + 2 * magnitude(right)

def reduce(snail):
    while True:
        (exec, snail, left, right) = explode(0, snail)
        if exec:
            continue
        (exec, snail) = split(snail)
        if exec:
            continue
        break
    return snail

def copy(snail):
    if type(snail) is int:
        return snail
    [left, right] = snail
    return [copy(left), copy(right)]

def part1(data):
    snail = data[0]

    for next in data[1:]:
        snail = reduce([snail, next])


    # snail finished
    print(snail)

    # calc magn

    print("Part 1:", magnitude(snail))


def part2(data):

    max_mag = 0

    for (i, s1) in enumerate(data):
        for (j, s2) in enumerate(data):
            print('\r', i, j, end='\t')
            if i is j:
                continue
            mag = magnitude(reduce(copy([s1, s2])))
            if mag > max_mag:
                max_mag = mag

    print("Part 2:", max_mag)


if __name__ == '__main__':
    part1(parse())
    part2(parse())
